type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/business/Seat.java
  visible: true
  text: |
    package cinema.business;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.Objects;

    public class Seat {
        private final int row;
        @JsonProperty("column")
        private int col;
        private final int price;
        @JsonIgnore
        private boolean booked;

        public Seat(int row, int col) {
            this.row = row;
            this.col = col;
            price = row <= 4 ? 10 : 8;
        }

        public void setBooked(boolean booked) {
            this.booked = booked;
        }

        public boolean isBooked() {
            return booked;
        }

        public int getRow() {
            return row;
        }

        public int getCol() {
            return col;
        }

        public int getPrice() {
            return price;
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "row=" + row +
                    ", col=" + col +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Seat seat)) return false;
            return getRow() == seat.getRow() && getCol() == seat.getCol();
        }

        @Override
        public int hashCode() {
            return Objects.hash(getRow(), getCol());
        }
    }
  learner_created: true
- name: src/cinema/presentation/CinemaController.java
  visible: true
  text: |
    package cinema.presentation;

    import cinema.business.*;
    import cinema.exceptions.InvalidRefundTokenException;
    import cinema.exceptions.SeatAlreadyBookedException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class CinemaController {
        @Autowired
        private CinemaService cinemaService;

        @GetMapping("/seats")
        public Cinema getCinemaStatus() {
            return cinemaService.getCinemaStatus();
        }

        @PostMapping("/purchase")
        public ResponseEntity<Object> purchaseSeat(@RequestBody SeatRequest seatRequest) {
            try {
                SeatPurchase seatPurchase = cinemaService.purchaseSeat(seatRequest);
                return ResponseHandler.generatePurchaseResponse(HttpStatus.OK, null, seatPurchase);
            } catch (IllegalArgumentException | SeatAlreadyBookedException e) {
                return ResponseHandler.generatePurchaseResponse(HttpStatus.BAD_REQUEST, e.getMessage(), null);
            }
        }

        @PostMapping("/return")
        public ResponseEntity<Object> refundPurchasedSeat(@RequestBody Map<String, UUID> tokenMap) {
            try {
                Seat refundedSeat = cinemaService.refundPurchasedSeat(tokenMap);
                return ResponseHandler.generateRefundResponse(HttpStatus.OK, null, refundedSeat);
            } catch (IllegalArgumentException | InvalidRefundTokenException e) {
                return ResponseHandler.generateRefundResponse(HttpStatus.BAD_REQUEST, e.getMessage(), null);
            }

        }

    }
  learner_created: true
- name: src/cinema/presentation/serializer/AvailableSeatsSerializer.java
  visible: true
  text: |
    package cinema.presentation.serializer;

    import cinema.business.Seat;
    import com.fasterxml.jackson.core.JsonGenerator;
    import com.fasterxml.jackson.databind.JsonSerializer;
    import com.fasterxml.jackson.databind.SerializerProvider;

    import java.io.IOException;
    import java.util.List;

    public class AvailableSeatsSerializer extends JsonSerializer<List<Seat>> {

        @Override
        public void serialize(List<Seat> availableSeats, JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeStartArray();
            for (Seat availableSeat : availableSeats) {
                if (availableSeat.isBooked()) {
                    continue;
                }
                gen.writeObject(availableSeat);
            }
            gen.writeEndArray();
        }
    }
  learner_created: true
- name: src/cinema/business/CinemaService.java
  visible: true
  text: |
    package cinema.business;

    import cinema.exceptions.InvalidRefundTokenException;
    import cinema.exceptions.SeatAlreadyBookedException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.Map;
    import java.util.Optional;
    import java.util.UUID;
    import java.util.concurrent.locks.Lock;
    import java.util.concurrent.locks.ReentrantReadWriteLock;
    import java.util.function.Predicate;

    @Service
    public class CinemaService {
        private final Cinema cinema;

        private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();

        private final Lock readLock = rwLock.readLock();
        private final Lock writeLock = rwLock.writeLock();

        @Autowired
        public CinemaService(Cinema cinema) {
            this.cinema = cinema;
        }

        public Cinema getCinemaStatus() {
            readLock.lock();
            try {
                return cinema;
            } finally {
                readLock.unlock();
                System.out.println("read lock unlocked!");
            }
        }

        public SeatPurchase purchaseSeat(SeatRequest seatRequest) throws IllegalArgumentException {
            if (seatRequest.getRow() > cinema.getTotalRows() || seatRequest.getRow() < 1
                    || seatRequest.getColumn() > cinema.getTotalColumns() || seatRequest.getColumn() < 1) {
                throw new IllegalArgumentException("The number of a row or a column is out of bounds!");
            }


            writeLock.lock();
            Optional<Seat> seatToPurchase = cinema.getAvailableSeats().stream()
                    .filter(getSameSeat(seatRequest))
                    .findFirst();

            try {
                if (seatToPurchase.isPresent() && !seatToPurchase.get().isBooked()) {
                    Seat seat = seatToPurchase.get();
                    return cinema.purchaseSeat(seat, UUID.randomUUID());
                } else {
                    throw new SeatAlreadyBookedException("The ticket has been already purchased!");
                }
            } finally {
                writeLock.unlock();
                System.out.println("write lock unlocked!");

            }
        }

        private static Predicate<Seat> getSameSeat(SeatRequest seatRequest) {
            return (seat) -> seat.getCol() == seatRequest.getColumn()
                    && seat.getRow() == seatRequest.getRow();
        }

        public Seat refundPurchasedSeat(Map<String, UUID> tokenMap) {
            if (!tokenMap.containsKey("token")) {
                throw new IllegalArgumentException("No token provided!");
            }

            SeatPurchase seatPurchase = cinema.getSeatPurchaseMap().get(tokenMap.get("token"));

            if (seatPurchase == null) {
                throw new InvalidRefundTokenException("Wrong token!");
            }

            Seat purchasedSeat = seatPurchase.seat();
            purchasedSeat.setBooked(false);
            cinema.getSeatPurchaseMap().remove(tokenMap.get("token"));
            return purchasedSeat;
        }


    }
  learner_created: true
- name: src/cinema/presentation/ResponseHandler.java
  visible: true
  text: |
    package cinema.presentation;

    import cinema.business.Seat;
    import cinema.business.SeatPurchase;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.HashMap;
    import java.util.Map;

    public class ResponseHandler {
        public static ResponseEntity<Object> generatePurchaseResponse(HttpStatus status, String message, SeatPurchase seatPurchase) {
            Map<String, Object> map = new HashMap<>();
            if (status == HttpStatus.OK) {
                map.put("token", seatPurchase.token());
                map.put("ticket", Map.of(
                        "row", seatPurchase.seat().getRow(),
                        "column", seatPurchase.seat().getCol(),
                        "price", seatPurchase.seat().getPrice()
                ));
            } else {
                map.put("error", message);
            }
            return new ResponseEntity<>(map, status);
        }

        public static ResponseEntity<Object> generateRefundResponse(HttpStatus status, String message, Seat refundedSeat) {
            Map<String, Object> response;
            if (status == HttpStatus.OK) {
                response = Map.of("returned_ticket", Map.of(
                        "row", refundedSeat.getRow(),
                        "column", refundedSeat.getCol(),
                        "price", refundedSeat.getPrice()
                ));
            } else {
                response = Map.of("error", message);
            }
            return new ResponseEntity<>(response, status);

        }
    }
  learner_created: true
- name: src/cinema/exceptions/InvalidRefundTokenException.java
  visible: true
  text: |
    package cinema.exceptions;

    public class InvalidRefundTokenException extends RuntimeException {
        public InvalidRefundTokenException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/business/Cinema.java
  visible: true
  text: |
    package cinema.business;


    import cinema.presentation.serializer.AvailableSeatsSerializer;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.databind.PropertyNamingStrategies;
    import com.fasterxml.jackson.databind.annotation.JsonNaming;
    import com.fasterxml.jackson.databind.annotation.JsonSerialize;
    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.UUID;
    import java.util.concurrent.ConcurrentHashMap;
    import java.util.concurrent.ConcurrentMap;


    @Component
    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
    public class Cinema {

        private final int totalRows;
        private final int totalColumns;
        @JsonSerialize(using = AvailableSeatsSerializer.class)
        private final List<Seat> availableSeats;
        @JsonIgnore
        private final ConcurrentMap<UUID, SeatPurchase> seatPurchaseMap;

        public Cinema() {
            List<Seat> aList = new ArrayList<>();
            for (int i = 1; i <= 9; i++) {
                for (int j = 1; j <= 9; j++) {
                    aList.add(new Seat(i, j));
                }
            }
            this.availableSeats = aList;
            this.seatPurchaseMap = new ConcurrentHashMap<>();
            this.totalRows = 9;
            this.totalColumns = 9;
        }

        public SeatPurchase purchaseSeat(Seat seat, UUID purchaseToken) {
            seat.setBooked(true);
            SeatPurchase seatPurchase = new SeatPurchase(seat, purchaseToken);
            addSeatToPurchasedList(seatPurchase, purchaseToken);
            return seatPurchase;
        }

        private void addSeatToPurchasedList(SeatPurchase seatPurchase, UUID purchaseToken) {
            seatPurchaseMap.put(purchaseToken, seatPurchase);
        }

        private void removeSeatFromAvailableList(Seat seat) {
            availableSeats.remove(seat);
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public ConcurrentMap<UUID, SeatPurchase> getSeatPurchaseMap() {
            return seatPurchaseMap;
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        @Override
        public String toString() {
            StringBuilder string = new StringBuilder();
            for (int i = 0; i < totalRows * totalColumns; i++) {
                string.append(availableSeats.get(i)).append("\n");
            }
            return string.toString();
        }
    }
  learner_created: true
- name: src/cinema/exceptions/SeatAlreadyBookedException.java
  visible: true
  text: "package cinema.exceptions;\n\npublic class SeatAlreadyBookedException extends\
    \ RuntimeException {\n    \n    public SeatAlreadyBookedException(String message)\
    \ {\n        super(message);\n    }\n\n    public SeatAlreadyBookedException(String\
    \ message, Throwable cause) {\n        super(message, cause);\n    }\n}\n"
  learner_created: true
- name: src/cinema/business/SeatRequest.java
  visible: true
  text: |
    package cinema.business;


    public class SeatRequest {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

    }
  learner_created: true
- name: src/cinema/business/SeatPurchase.java
  visible: true
  text: |
    package cinema.business;

    import java.util.UUID;

    public record SeatPurchase(Seat seat, UUID token) {
    }
  learner_created: true
- name: src/cinema/business/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 05 Apr 2023 02:15:04 UTC"
record: -1
